(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{rfx8:function(e,n,t){"use strict";t.r(n);var s=t("q1tI"),o=t.n(s),r=t("mcK/"),a=t("Ov9x"),i=t("2G++");n.default=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(a.a,{content:"\nAssume that we want to turn the following element to draggable element:\n\n~~~ html\n<div id=\"resizeMe\" class=\"resizable\">Resize me</div>\n~~~\n\nFirst, we need to prepare some elements that indicate the element is resizable. They are placed absolutely at the four sides of the original element.\nTo make the demo simply, I only prepare two of them which are placed at the right and bottom sides:\n\n~~~ html\n<div id=\"resizeMe\" class=\"resizable\">\n    Resize me\n    <div class=\"resizer resizer-r\"></div>\n    <div class=\"resizer resizer-b\"></div>\n</div>\n~~~\n\nHere is the basic styles for the layout:\n\n~~~ css\n.resizable {\n    position: relative;\n}\n.resizer {\n    /* All resizers are positioned absolutely inside the element */\n    position: absolute;\n}\n\n/* Placed at the right side */\n.resizer-r {\n    cursor: col-resize;\n    height: 100%;\n    right: 0;\n    top: 0;\n    width: 5px;\n}\n\n/* Placed at the bottom side */\n.resizer-b {\n    bottom: 0;\n    cursor: row-resize;\n    height: 5px;\n    left: 0;\n    width: 100%;\n}\n~~~\n\nTo make the element resizable, we are going to handle three events:\n\n* `mousedown` on the resizers: Track the current position of mouse and dimension of the original element\n* `mousemove` on `document`: Calculate how far the mouse has been moved, and adjust the dimension of the element\n* `mouseup` on `document`: Remove the event handlers of `document`\n\n~~~ javascript\n// Query the element\nconst ele = document.getElementById('resizeMe');\n\n// The current position of mouse\nlet x = 0;\nlet y = 0;\n\n// The dimension of the element\nlet w = 0;\nlet h = 0;\n\n// Handle the mousedown event\n// that's triggered when user drags the resizer\nconst mouseDownHandler = function(e) {\n    // Get the current mouse position\n    x = e.clientX;\n    y = e.clientY;\n\n    // Calculate the dimension of element\n    const styles = window.getComputedStyle(ele);\n    w = parseInt(styles.width, 10);\n    h = parseInt(styles.height, 10);\n\n    // Attach the listeners to `document`\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('mouseup', mouseUpHandler);\n};\n\nconst mouseMoveHandler = function(e) {\n    // How far the mouse has been moved\n    const dx = e.clientX - x;\n    const dy = e.clientY - y;\n\n    // Adjust the dimension of element\n    ele.style.width = `${w + dx}px`;\n    ele.style.height = `${h + dy}px`;\n};\n\nconst mouseUpHandler = function() {\n    // Remove the handlers of `mousemove` and `mouseup`\n    document.removeEventListener('mousemove', mouseMoveHandler);\n    document.removeEventListener('mouseup', mouseUpHandler);\n};\n~~~\n\nAll the event handlers are ready. Finally, we attach the `mousedown` event handler to all the resizers:\n\n~~~ javascript\n// Query all resizers\nconst resizers = ele.querySelectorAll('.resizer');\n\n// Loop over them\n[].forEach.call(resizers, function(resizer) {\n\tresizer.addEventListener('mousedown', mouseDownHandler);\t\n});\n~~~\n"}),o.a.createElement(r.a,{src:"/demo/make-a-resizable-element/index.html"}),o.a.createElement(i.a,{slugs:["attach-or-detach-an-event-handler","loop-over-a-nodelist","make-a-draggable-element","resize-columns-of-a-table","set-css-style-for-an-element"]}))}}}]);
//# sourceMappingURL=posts-make-a-resizable-element.ff2ab10edd83bba2cf67.js.map