(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{wGLp:function(e,t,n){"use strict";n.r(t);var o=n("q1tI"),r=n.n(o),i=n("Ov9x"),a=n("2G++");t.default=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(i.a,{content:"\n## 1. Subtract `clientWidth` from `offsetWidth`\n\nThe `clientWidth` property indicates the width without scrollbar. The `offsetWidth`, on the other hand, includes the scrollbar if there is.\n\nHere is the simple calculation to determine the width of scrollbar:\n\n~~~ javascript\nconst scrollbarWidth = document.body.offsetWidth - document.body.clientWidth;\n~~~\n\n## 2. Use a fake element\n\nWe create two fake `div` elements, one of them is the child of the other. Then calculate the difference between their widths.\n\n~~~ javascript\nconst calculateScrollbarWidth = function() {\n    // Create the parent element\n    const outer = document.createElement('div');\n    outer.style.visibility = 'hidden';\n    outer.style.overflow = 'scroll';\n    \n    // Append it to `body`\n    document.body.appendChild(outer);\n\n    // Create the child element\n    const inner = document.createElement('div');\n    outer.appendChild(inner);\n\n    // Calculate the difference between their widths\n    const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;\n\n    // Remove the parent element\n    document.body.removeChild(outer);\n\n    return scrollbarWidth;\n};\n~~~\n\nThis method doesn't work on macOS if the _Show scroll bars_ option is set as _Automatically based on mouse or trackpad_ or _When scrolling_.\n\n![Show scroll bars option on macOS](/assets/scroll-macos.png)\n"}),r.a.createElement(a.a,{slugs:["append-to-an-element","create-an-element","determine-the-height-and-width-of-an-element","remove-an-element"]}))}}}]);
//# sourceMappingURL=posts-calculate-the-size-of-scrollbar.ceac4eb52a3321bbab89.js.map