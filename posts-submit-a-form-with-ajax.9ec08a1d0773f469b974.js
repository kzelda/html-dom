(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{isWN:function(e,n,t){"use strict";t.r(n);var r=t("q1tI"),a=t.n(r),s=t("TJpk"),o=t("Ov9x"),i=t("2G++");n.default=function(){return a.a.createElement(a.a.Fragment,null,a.a.createElement(s.Helmet,null,a.a.createElement("meta",{name:"keywords",content:"ajax form submit, XMLHttpRequest"})),a.a.createElement(o.a,{content:"\nThe following function submits the data of `formEle` to the back-end using an Ajax request:\n\n~~~ javascript\nconst submit = function(formEle) {\n    return new Promise(function(resolve, reject) {\n        // Serialize form data\n        // See https://htmldom.dev/serialize-form-data-into-a-query-string\n        const params = serialize(formEle);\n\n        // Create new Ajax request\n        const req = new XMLHttpRequest();\n        req.open('POST', formEle.action, true);\n        req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n\n        // Handle the events\n        req.onload = function() {\n            if (req.status >= 200 && req.status < 400) {\n                resolve(req.responseText);\n            }\n        };\n        req.onerror = function() {\n            reject();\n        };\n\n        // Send it\n        req.send(params);\n    });\n};\n~~~\n\nWhere the `serialize` function serializes all the form data into a query string. You can see how it's implemented \nin this [post](/serialize-form-data-into-a-query-string).\n\n## Usage\n\n~~~ javascript\nconst formEle = document.getElementById(...);\n\nsubmit(formEle).then(function(response) {\n    // `response` is what we got from the back-end\n    // We can parse it if the server returns a JSON\n    const data = JSON.parse(response);\n    ...\n});\n~~~\n"}),a.a.createElement(i.a,{slugs:["serialize-form-data-into-a-query-string","upload-files-with-ajax"]}))}}}]);
//# sourceMappingURL=posts-submit-a-form-with-ajax.9ec08a1d0773f469b974.js.map