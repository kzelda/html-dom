(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"rzs+":function(e,t,n){"use strict";n.r(t);var a=n("q1tI"),r=n.n(a),s=n("TJpk"),i=n("mcK/"),c=n("Ov9x"),o=n("2G++");t.default=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(s.Helmet,null,r.a.createElement("meta",{name:"keywords",content:"addEventListener, input event, keypress event, preventDefault, selectionEnd, selectionStart, setSelectionRange"})),r.a.createElement(c.a,{content:"\nIn this example, we will force users to enter characters from given set only. Specifically, the supported characters\nin this demonstration include the digits and space. Of course, you can apply the idea for other characters as well.\n\nHere is our input element:\n\n~~~ html\n<input type=\"text\" id=\"input\" />\n~~~\n\n## 1. Handle the events\n\nBy handling the `keypress` event, we can prevent user from entering characters except digits and space:\n\n~~~ javascript\nconst ele = document.getElementById('input');\n\nele.addEventListener('keypress', function(e) {\n    // Get the code of pressed key\n    const key = e.which || e.keyCode;\n\n    // 0, 1, ..., 9 have key code of 48, 49, ..., 57, respectively\n    // Space has key code of 32\n    if (key != 32 && (key < 48 || key > 57)) {\n        // Prevent the default action\n        e.preventDefault();\n    }\n});\n~~~\n\nIt looks good but isn't enough since user is still able to paste or drag unsupported characters to the input.\nThese cases can be handled by the `input` event:\n\n~~~ javascript\n// Track the current value\nlet currentValue = ele.value || '';\n\nele.addEventListener('input', function(e) {\n    const target = e.target;\n\n    // If users enter supported character (digits or space)\n    /^[0-9\\s]*$/.test(target.value)\n        // Backup the current value\n        ? currentValue = target.value\n        // Otherwise, restore the value\n        // Note that in this case, `e.preventDefault()` doesn't help\n        : target.value = currentValue;\n});\n~~~\n\nHere we check if the value matches the regular expression `/^[0-9\\s]*$/` that covers the digit and space characters.\n\nIt fixes the cases where users paste from the keyboard (`Ctrl + V`), context menu or drop text to the input.\n\nBut there's another issue. Calling `target.value = currentValue` will put the cursor at the end of input.\nWe have to persist the cursor's position.\n\n~~~ javascript\n// Track the current cursor's position\nconst selection = {};\n\nele.addEventListener('keydown', function(e) {\n    const target = e.target;\n    selection = {\n        selectionStart: target.selectionStart,\n        selectionEnd: target.selectionEnd,\n    };\n});\n~~~\n\nWhen user changes the input value, we will restore both the value and selection positions if the value isn't supported:\n\n~~~ javascript\nele.addEventListener('input', function(e) {\n    const target = e.target;\n\n    if (/^[0-9s]*$/.test(target.value)) {\n        currentValue = target.value;\n    } else {\n        // Users enter the not supported characters\n        // Restore the value and selection\n        target.value = currentValue;\n        target.setSelectionRange(\n            selection.selectionStart,\n            selection.selectionEnd\n        );\n    }\n});\n~~~\n\nWe can combine the tracked properties (`value`, `selectionStart` and `selectionEnd`) to a single variable as you\nsee in the demo at the end.\n\n## 2. Use the special input\n\nWe can use a special HTML 5 input to serve particular use cases:\n\n| `input`                     | Description                       |\n|-------------------------------|-----------------------------------|\n| `<input type=\"color\" />`    | Let user specify a color          |\n| `<input type=\"date\" />`     | Let user enter a date             |\n| `<input type=\"email\" />`    | Let user enter an email address   |\n| `<input type=\"number\" />`   | Let user enter numbers only       |\n| `<input type=\"tel\" />`      | Let user enter a telephone number |\n| `<input type=\"time\" />`     | Let user enter a time             |\n| `<input type=\"url\" />`      | Let user enter a URL              |\n\nThere are more built-in types that you can explore [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#%3Cinput%3E_types).\n\nIn our specific example, `<input type=\"number\" />` doesn't help because it doesn't allow to enter a space.\n"}),r.a.createElement(i.a,{src:"/demo/allow-to-enter-particular-characters-only/index.html"}),r.a.createElement(o.a,{slugs:["attach-or-detach-an-event-handler","prevent-the-default-action-of-an-event"]}))}}}]);
//# sourceMappingURL=posts-allow-to-enter-particular-characters-only.3eafa96f7a159b76e526.js.map