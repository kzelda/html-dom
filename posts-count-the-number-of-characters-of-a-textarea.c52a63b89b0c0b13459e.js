(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{hYfS:function(e,t,n){"use strict";n.r(t);var a=n("q1tI"),r=n.n(a),s=n("TJpk"),c=n("mcK/"),o=n("Ov9x"),h=n("2G++");t.default=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(s.Helmet,null,r.a.createElement("meta",{name:"keywords",content:"display number of characters, maxlength attribute"})),r.a.createElement(o.a,{content:"\nAssume that we have a `textarea` and a normal `div` elements for showing how many characters user has been entering:\n\n~~~ html\n<textarea id=\"message\"></textarea>\n<div id=\"counter\"></div>\n~~~\n\n## Use the `maxlength` attribute\n\nThe `maxlength` attribute sets the maximum number of characters that user can put in the textarea.\n\n~~~ html\n<textarea maxlength=\"200\" id=\"message\"></textarea>\n~~~\n\n## Count the number of characters\n\nHandle the `input` event which is triggered if the value of element is changed:\n\n~~~ javascript\nconst messageEle = document.getElementById('message');\nconst counterEle = document.getElementById('counter');\n\nmessageEle.addEventListener('input', function(e) {\n    const target = e.target;\n\n    // Get the `maxlength` attribute\n    const maxLength = target.getAttribute('maxlength');\n\n    // Count the current number of characters\n    const currentLength = target.value.length;\n\n    counterEle.innerHTML = `${currentLength}/${maxLength}`;\n});\n~~~\n\n> ## Good to know\n>\n> The common mistake is to capture the `keyup` event. It doesn't work in some cases such as:\n> * User drags a text into the textarea\n> * User right-clicks in the textarea and chooses _Paste_ from the context menu\n"}),r.a.createElement(c.a,{src:"/demo/count-the-number-of-characters-of-a-textarea/index.html"}),r.a.createElement(h.a,{slugs:["attach-or-detach-an-event-handler","get-or-set-the-html-of-an-element","get-set-and-remove-attributes"]}))}}}]);
//# sourceMappingURL=posts-count-the-number-of-characters-of-a-textarea.c52a63b89b0c0b13459e.js.map